require 'digest'

def create_contract!(owner, keys, code, private_key = wif)
  txn = {
    'extensions' => [],
    'operations' => [
      {
        'type' => 'contract_create_operation',
        'value' => {
          'owner' => owner,
          'wallet' => keys['wallet_name'],
          'code' => code
        }
      }
    ]
  }
  signed = Xgt::Ruby::Auth.sign_transaction(rpc, txn, [private_key], chain_id)
  $stderr.puts(%(Registering contract... #{signed.to_json}))
  response = nil
  begin
    response = rpc.call('transaction_api.broadcast_transaction', [signed])
  rescue => e
    $stderr.puts e
  end
  $stderr.puts(%(Received response contract... #{response}))
end

def invoke_contract!(contract_hash, invoker, value, args)
  txn = {
    'extensions' => [],
    'operations' => [
      {
        'type' => 'contract_invoke_operation',
        'value' => {
          'contract_hash' => contract_hash,
          'caller' => invoker,
          'value' => value,
          'args' => args
        }
      }
    ]
  }
  $stderr.puts(%(Signing contract contract... #{txn.to_json}))
  signed = Xgt::Ruby::Auth.sign_transaction(rpc, txn, [wif], chain_id)
  $stderr.puts(%(Registering contract... #{signed.to_json}))
  response = rpc.call('transaction_api.broadcast_transaction', [signed])
  $stderr.puts(%(Received response contract... #{response}))
  response
end

namespace :contracts do
  desc 'Create a sample contract'
  task :create do
    keys = generate_keys
    create_wallet!(keys)
    # Bytecode explanation:
    #
    #     60   03 60   04 01  00
    #     PUSH 3  PUSH 4  ADD HALT
    #
    create_contract!(wallet, keys, '600360040100')

    response = rpc.call('contract_api.list_owner_contracts', { 'owner' => wallet }) || {}
    p response
    contract_hash = response['contracts'].first['contract_hash']
    response = rpc.call('contract_api.get_contract', { 'contract_hash' => contract_hash }) || {}
    p response

    invoke_contract!(contract_hash, keys['wallet_name'], 0, '')
  end

  desc 'Create a sample contract which calls another'
  task :create_and_call do
    create_contract = lambda { |code|
      keys = generate_keys
      create_wallet!(keys)
      create_contract!(wallet, keys, code)

      response = rpc.call('contract_api.list_owner_contracts', { 'owner' => wallet }) || {}
      p response
      contract_hash = response['contracts'].first['contract_hash']
      response = rpc.call('contract_api.get_contract', { 'contract_hash' => contract_hash }) || {}
      p response

      [contract_hash, keys]
    }

    # Arguments to `call` opcode are:
    #
    #     energy contract_hash value argsOffset argsLength retOffset retLength
    #
    # Bytecode explanation:
    #
    #     PUSH 0 PUSH 0 RETURN HALT
    #     60 00 60 00 F3 00
    #
    contract_hash1, keys1 = create_contract.(%(60006000F300))
    #
    # Bytecode explanation:
    #
    #     PUSH 0 PUSH #{contract_hash1} 0 0 0 0 0 CALL HALT
    #     60 00 60 #{contract_hash1} 60 00 60 00 60 00 60 00 60 00 F1 00
    #
    contract_hash2, keys2 = create_contract.(%(600060#{contract_hash1}60006000600060006000F100))

    invoke_contract!(contract_hash2, keys2['wallet_name'], 0, '')
  end

  desc 'Calling a method in another contract'
  task :call_method do
    %w(
      PUSH1 0x4 CALLDATASIZE LT # Is message data size < 4 bytes
      PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV PUSH4 0xFFFFFFFF AND DUP1 PUSH4 0x8976762D EQ PUSH2 0x46 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x67 PUSH1 0x4 DUP1 DUP1 CALLDATALOAD
    )
  end

  desc 'The "Do Nothing" contract'
  task :do_nothing do
    create_contract = lambda { |code|
      keys = generate_keys
      create_wallet!(keys)
      create_contract!(wallet, keys, code)

      response = rpc.call('contract_api.list_owner_contracts', { 'owner' => wallet }) || {}
      p response
      contract_hash = response['contracts'].first['contract_hash']
      response = rpc.call('contract_api.get_contract', { 'contract_hash' => contract_hash }) || {}
      p response

      [contract_hash, keys]
    }

    contract_hash, keys = create_contract.(%(6080604052348015600f57600080fd5b50606d80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80632f576f2014602d575b600080fd5b60336035565b005b56fea2646970667358221220975bdb6949442538b90c14c420b0a2f547f0437e85a73da12faf4e6834f0817264736f6c63430008070033))

    invoke_contract!(contract_hash, keys['wallet_name'], 0, '')
  end

  desc 'Basic contract create contract'
  task :basic_create do

    code = '6080604052604051806101a0016040528061017d815260200161021861017d913960009080519060200190610035929190610048565b5034801561004257600080fd5b506100f3565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261007e57600085556100c5565b82601f1061009757805160ff19168380011785556100c5565b828001600101855582156100c5579182015b828111156100c45782518255916020019190600101906100a9565b5b5090506100d291906100d6565b5090565b5b808211156100ef5760008160009055506001016100d7565b5090565b610116806101026000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063775c300c14602d575b600080fd5b60336035565b005b6000808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801560c85780601f10609e5761010080835404028352916020019160c8565b820191906000526020600020905b81548152906001019060200180831160ac57829003601f168201915b5050505050905060008151602083016000f09050505056fea26469706673582212207ebdd3e8a24dd18c61ea1cc0033ad3ac21de43f853f03cfeea42954a7d60c12864736f6c63430007060033608060405234801561001057600080fd5b5061015d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b5780637872ab4914610059575b600080fd5b61004361009d565b6040518082815260200191505060405180910390f35b61009b6004803603602081101561006f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100c5565b005b60007f736d617278000000000000000000000000000000000000000000000000000000905090565b8073ffffffffffffffffffffffffffffffffffffffff1663380c7a676040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561010d57600080fd5b505af1158015610121573d6000803e3d6000fd5b505050505056fea265627a7a72315820fb2fc7a07f0eebf799c680bb1526641d2d905c19393adf340a04e48c9b527de964736f6c634300050c0032'
  end

  desc 'Basic lottery contract'
  task :basic_lottery do
    def transfer_xgt(from, to, amount)
      txn = {
        'extensions' => [],
        'operations' => [
          {
            'type' => 'transfer_operation',
            'value' => {
              'amount' => {
                'amount' => amount.to_s,
                'precision' =>  8,
                'nai' => '@@000000021'
              },
              'from' => from,
              'to' => to,
              'json_metadata' => '',
              'extensions' => []
            }
          }
        ]
      }

      id = rpc.broadcast_transaction(txn, [wif], chain_id)
      (puts 'Waiting...' or sleep 1) until rpc.transaction_ready?(id)
    end

    def get_wallet(address)
      response = rpc.call('database_api.find_wallets', { 'wallets' => [address] })
      response['wallets'].first
    end

    code = %(608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108b5806100606000396000f3fe60806040526004361061004a5760003560e01c8063481c6a751461004f5780635d495aea1461007a5780638b5b9ccc14610091578063e97dcb62146100bc578063f71d96cb146100c6575b600080fd5b34801561005b57600080fd5b50610064610103565b6040516100719190610657565b60405180910390f35b34801561008657600080fd5b5061008f610127565b005b34801561009d57600080fd5b506100a6610283565b6040516100b39190610672565b60405180910390f35b6100c4610311565b005b3480156100d257600080fd5b506100ed60048036038101906100e891906104ba565b610389565b6040516100fa9190610657565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017f57600080fd5b600060018054905061018f6103c8565b6101999190610785565b9050600181815481106101af576101ae6107e5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561021f573d6000803e3d6000fd5b50600067ffffffffffffffff81111561023b5761023a610814565b5b6040519080825280602002602001820160405280156102695781602001602082028036833780820191505090505b506001908051906020019061027f9291906103fe565b5050565b6060600180548060200260200160405190810160405280929190818152602001828054801561030757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116102bd575b5050505050905090565b662386f26fc10000341161032457600080fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6001818154811061039957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000444260016040516020016103e09392919061061e565b6040516020818303038152906040528051906020012060001c905090565b828054828255906000526020600020908101928215610477579160200282015b828111156104765782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061041e565b5b5090506104849190610488565b5090565b5b808211156104a1576000816000905550600101610489565b5090565b6000813590506104b481610868565b92915050565b6000602082840312156104d0576104cf610856565b5b60006104de848285016104a5565b91505092915050565b60006104f38383610517565b60208301905092915050565b600061050b8383610535565b60208301905092915050565b61052081610725565b82525050565b61052f81610725565b82525050565b61053e81610725565b82525050565b600061054f826106b9565b61055981856106e9565b935061056483610694565b8060005b8381101561059557815161057c88826104e7565b9750610587836106cf565b925050600181019050610568565b5085935050505092915050565b60006105ad826106c4565b6105b781856106fa565b93506105c2836106a4565b8060005b838110156105fa576105d782610843565b6105e188826104ff565b97506105ec836106dc565b9250506001810190506105c6565b5085935050505092915050565b61061861061382610757565b61077b565b82525050565b600061062a8286610607565b60208201915061063a8285610607565b60208201915061064a82846105a2565b9150819050949350505050565b600060208201905061066c6000830184610526565b92915050565b6000602082019050818103600083015261068c8184610544565b905092915050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081549050919050565b6000602082019050919050565b6000600182019050919050565b600082825260208201905092915050565b600081905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061073082610737565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061077461076f8361085b565b610705565b9050919050565b6000819050919050565b600061079082610757565b915061079b83610757565b9250826107ab576107aa6107b6565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061084f8254610761565b9050919050565b600080fd5b60008160001c9050919050565b61087181610757565b811461087c57600080fd5b5056fea2646970667358221220729e8e8f09800dda1a73c44653546f8c8e4ee6c848019a56bd0d59c47e7aa72564736f6c63430008070033)

    xgt_wallet_0 = 'XGT0000000000000000000000000000000000000000'

    creator_keys = generate_keys
    creator = create_wallet!(creator_keys)
    transfer_xgt(xgt_wallet_0, creator, 10_000_000)

    alice_keys = generate_keys
    alice = create_wallet!(alice_keys)
    transfer_xgt(xgt_wallet_0, alice, 20_000_000)

    bob_keys = generate_keys
    bob = create_wallet!(bob_keys)
    transfer_xgt(xgt_wallet_0, bob, 30_000_000)

    charlie_keys = generate_keys
    charlie = create_wallet!(charlie_keys)
    transfer_xgt(xgt_wallet_0, charlie, 40_000_000)

    contract_keys = generate_keys

    create_wallet!(contract_keys)

    sleep(2)

    create_contract!(creator, contract_keys, code, creator_keys['recovery_private'])

    sleep(2)

    # Go and get most recently created contract
    response = rpc.call('contract_api.list_owner_contracts', { 'owner' => creator }) || {}
    p response
    contract_hash = response['contracts'].first['contract_hash']
    contract = response['contracts'].first['wallet']
    # Inspect returned contract
    # response = rpc.call('contract_api.get_contract', { 'contract_hash' => contract_hash }) || {}
    # p response
    #

    sleep(2)

    contract_balance_before = get_wallet(contract)['balance']['amount']
    creator_balance_before = get_wallet(creator)['balance']['amount']
    alice_balance_before = get_wallet(alice)['balance']['amount']
    bob_balance_before = get_wallet(bob)['balance']['amount']
    charlie_balance_before = get_wallet(charlie)['balance']['amount']

    creator_address_r160 = get_wallet(creator)['address_ripemd160']
    alice_address_r160 = get_wallet(alice)['address_ripemd160']
    bob_address_r160 = get_wallet(bob)['address_ripemd160']
    charlie_address_r160 = get_wallet(charlie)['address_ripemd160']

    puts "\n\nCreator address: #{creator}\nRipemd160: #{creator_address_r160}"
    puts "\n\nAlice address: #{alice}\nRipemd160: #{alice_address_r160}"
    puts "\n\nBob address: #{bob}\nRipemd160: #{bob_address_r160}"
    puts "\n\nCharlie address: #{charlie}\nRipemd160: #{charlie_address_r160}\n\n"

    # Creator calls the enter() function
    invoke_contract!(contract_hash, creator, 10000000000000001, 'e97dcb62')
    sleep(1)
    # Alice calls the enter() function
    invoke_contract!(contract_hash, alice, 20000000000000002, 'e97dcb62')
    sleep(1)
    # Bob calls the enter() function
    invoke_contract!(contract_hash, bob, 30000000000000003, 'e97dcb62')
    sleep(1)
    # Charlie calls the enter() function
    invoke_contract!(contract_hash, charlie, 40000000000000004, 'e97dcb62')
    sleep(1)
    # Call the getPlayers() function
    invoke_contract!(contract_hash, creator, 0, '8b5b9ccc')
    sleep(1)
    # Call the pickWinner() function
    invoke_contract!(contract_hash, creator, 0, '5d495aea')

    sleep(5)

    contract_balance_after = get_wallet(contract)['balance']['amount']
    creator_balance_after = get_wallet(creator)['balance']['amount']
    alice_balance_after = get_wallet(alice)['balance']['amount']
    bob_balance_after = get_wallet(bob)['balance']['amount']
    charlie_balance_after = get_wallet(charlie)['balance']['amount']

    puts "\n\nCreator address: #{creator}"
    puts "Alice address: #{alice}"
    puts "Bob address: #{bob}"
    puts "Charlie address: #{charlie}"


    puts "\n\nContract balance before: #{contract_balance_before}"
    puts "\n\nCreator balance before: #{creator_balance_before}"
    puts "Alice balance before: #{alice_balance_before}"
    puts "Bob balance before: #{bob_balance_before}"
    puts "Charlie balance before: #{charlie_balance_before}"

    puts "\n\nContract balance after: #{contract_balance_after}"
    puts "\n\nCreator balance after: #{creator_balance_after}"
    puts "Alice balance after: #{alice_balance_after}"
    puts "Bob balance after: #{bob_balance_after}"
    puts "Charlie balance after: #{charlie_balance_after}"
  end

  task :test_create do
    xgt_wallet_0 = 'XGT0000000000000000000000000000000000000000'

    creator_keys = generate_keys
    creator = create_wallet!(creator_keys)
    contract_keys = generate_keys

    create_wallet!(contract_keys)

    sleep(2)

    code = %(608060405260046040516100129061008a565b80828152602001915050604051809103906000f080158015610038573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561008457600080fd5b50610096565b60d0806103d683390190565b610331806100a56000396000f3fe6080604052600436106100295760003560e01c80638dcd64cc1461002e57806395fe0e6514610066575b600080fd5b6100646004803603604081101561004457600080fd5b8101908080359060200190929190803590602001909291905050506100a1565b005b34801561007257600080fd5b5061009f6004803603602081101561008957600080fd5b8101908080359060200190929190505050610162565b005b600081836040516100b190610220565b808281526020019150506040518091039082f0801580156100d6573d6000803e3d6000fd5b50905090508073ffffffffffffffffffffffffffffffffffffffff16630c55699c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561012157600080fd5b505afa158015610135573d6000803e3d6000fd5b505050506040513d602081101561014b57600080fd5b810190808051906020019092919050505050505050565b60008160405161017190610220565b80828152602001915050604051809103906000f080158015610197573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16630c55699c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101e057600080fd5b505afa1580156101f4573d6000803e3d6000fd5b505050506040513d602081101561020a57600080fd5b8101908080519060200190929190505050505050565b60d08061022d8339019056fe60806040526040516100d03803806100d083398181016040526020811015602557600080fd5b8101908080519060200190929190505050806000819055505060848061004c6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80630c55699c14602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea265627a7a723158203e3e89f6c037d9933d5bdef0a2770bf1f37edb6a783aa6541fa6959d9e3dc29364736f6c63430005110032a265627a7a72315820a054097388070f7dcd34b458b35e036d10e3f9defdd31fc4e1d4df5f83232c7564736f6c6343000511003260806040526040516100d03803806100d083398181016040526020811015602557600080fd5b8101908080519060200190929190505050806000819055505060848061004c6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80630c55699c14602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea265627a7a723158203e3e89f6c037d9933d5bdef0a2770bf1f37edb6a783aa6541fa6959d9e3dc29364736f6c63430005110032)
    create_contract!(creator, contract_keys, code, creator_keys['recovery_private'])

    sleep(2)

    response = rpc.call('contract_api.list_owner_contracts', { 'owner' => creator }) || {}
    p response
    contract_hash = response['contracts'].first['contract_hash']

    invoke_contract!(contract_hash, creator, 0, '95fe0e650000000000000000000000000000000000000000000000000000000000000001')

    response = rpc.call('contract_api.list_owner_contracts', { 'owner' => creator }) || {}
    puts "Creator contracts: \n\n\n"
    puts JSON.pretty_generate response

    contract_wallet = response['contracts'].first['wallet']

    response = rpc.call('contract_api.list_owner_contracts', { 'owner' => contract_wallet }) || {}
    puts "Contract contracts: "
    puts JSON.pretty_generate response
  end

  task :delegatecall do
    xgt_wallet_0 = 'XGT0000000000000000000000000000000000000000'

    # Create wallets for each contract
    creator_keys = generate_keys
    creator = create_wallet!(creator_keys)

    storage_keys = generate_keys
    create_wallet!(storage_keys)

    calculator_keys = generate_keys
    create_wallet!(calculator_keys)

    machine_keys = generate_keys
    create_wallet!(machine_keys)

    sleep(2)

    puts "Wallets created"

    # Create storage contract to be called from machine
    storage_code = %(608060405234801561001057600080fd5b5060405161011d38038061011d8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000819055505060c38061005a6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80633c6bb43614603757806355241077146053575b600080fd5b603d607e565b6040518082815260200191505060405180910390f35b607c60048036036020811015606757600080fd5b81019080803590602001909291905050506084565b005b60005481565b806000819055505056fea265627a7a7231582074b793eb6e6838ddcd002ac1df0e6b92009ef3e4437800f9b467f4a9e71251fc64736f6c63430005110032)
    create_contract!(creator, storage_keys, storage_code, creator_keys['recovery_private'])

    puts "Created storage contract"

    sleep(2)

    # Create calculator contract to be called using delegatecall from machine
    calculator_code = %(608060405234801561001057600080fd5b506101fd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634f8632ba146100465780636e008b3514610090578063771602f7146100ae575b600080fd5b61004e6100fa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610098610120565b6040518082815260200191505060405180910390f35b6100e4600480360360408110156100c457600080fd5b810190808035906020019092919080359060200190929190505050610126565b6040518082815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600081830160008190555082600054101561013d57fe5b7f7afbe4f1c55b5f72ea356f5b4d5615831867af31454a5ca5557f315e6d11a3698383604051808381526020018281526020019250505060405180910390a133600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005490509291505056fea265627a7a7231582050376063d00c2b0fa378da9e1c7614c28dfbbaa59458fc67fc68b2d54fed57dd64736f6c63430005110032)
    stripped_calculator_code = %(608060405234801561001057600080fd5b50600436106100415760003560e01c80634f8632ba146100465780636e008b3514610090578063771602f7146100ae575b600080fd5b61004e6100fa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610098610120565b6040518082815260200191505060405180910390f35b6100e4600480360360408110156100c457600080fd5b810190808035906020019092919080359060200190929190505050610126565b6040518082815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600081830160008190555082600054101561013d57fe5b7f7afbe4f1c55b5f72ea356f5b4d5615831867af31454a5ca5557f315e6d11a3698383604051808381526020018281526020019250505060405180910390a133600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005490509291505056fea265627a7a7231582050376063d00c2b0fa378da9e1c7614c28dfbbaa59458fc67fc68b2d54fed57dd64736f6c63430005110032)
    create_contract!(creator, calculator_keys, calculator_code, creator_keys['recovery_private'])

    puts "Created calculator contract"

    sleep(2)

    # Calling contract aka machine
    machine_code = %(608060405234801561001057600080fd5b50600080819055506107d1806100276000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806386b714e21161005b57806386b714e2146101085780639b7e450c14610152578063c14731ca146101be578063f98f34d8146102045761007d565b806320965255146100825780634f8632ba146100a05780636e008b35146100ea575b600080fd5b61008a610270565b6040518082815260200191505060405180910390f35b6100a861031a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100f2610340565b6040518082815260200191505060405180910390f35b610110610346565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101a86004803603606081101561016857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061036c565b6040518082815260200191505060405180910390f35b6101ea600480360360208110156101d457600080fd5b8101908080359060200190929190505050610537565b604051808215151515815260200191505060405180910390f35b61025a6004803603606081101561021a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506105cf565b6040518082815260200191505060405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633c6bb4366040518163ffffffff1660e01b815260040160206040518083038186803b1580156102da57600080fd5b505afa1580156102ee573d6000803e3d6000fd5b505050506040513d602081101561030457600080fd5b8101908080519060200190929190505050905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60005481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060608573ffffffffffffffffffffffffffffffffffffffff16858560405160240180838152602001828152602001925050506040516020818303038152906040527f771602f7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610451578051825260208201915060208101905060208303925061042e565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146104b1576040519150601f19603f3d011682016040523d82523d6000602084013e6104b6565b606091505b50915091507fb3cc7c40ae5fe031ec021a55a5c5cbddcb0837657bfaa8e8249801f67f7296458585846040518084815260200183815260200182151515158152602001935050505060405180910390a180806020019051602081101561051b57600080fd5b8101908080519060200190929190505050925050509392505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166355241077836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156105ae57600080fd5b505af11580156105c2573d6000803e3d6000fd5b5050505060019050919050565b60008060608573ffffffffffffffffffffffffffffffffffffffff16858560405160240180838152602001828152602001925050506040516020818303038152906040527f771602f7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106106b45780518252602082019150602081019050602083039250610691565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610716576040519150601f19603f3d011682016040523d82523d6000602084013e61071b565b606091505b50915091507f81f50033f40bab548b88ccfd816202734d9325c0718e0395b473afe5454d599e8585846040518084815260200183815260200182151515158152602001935050505060405180910390a180806020019051602081101561078057600080fd5b810190808051906020019092919050505092505050939250505056fea265627a7a72315820a7fa96064b10ab27cbf9ae8932450561f061b789db57f9413d7820936dfcd47b64736f6c63430005110032)
    create_contract!(creator, machine_keys, machine_code, creator_keys['recovery_private'])

    puts "Created machine contract"

    sleep(2)

    # Values to be added together
    val1 = "00000000000000000000000000000001"
    val2 = "00000000000000000000000000000002"

    response = rpc.call('contract_api.list_owner_contracts', { 'owner' => creator }) || {}
    puts "\n\n\n\n"
    puts machine_keys['wallet_name']
    puts "\n\n\n\n"
    puts JSON.pretty_generate response
    contract_hash = response['contracts'].first['contract_hash']

    calculator_contract_address = response['contracts'].select { |contract| contract['code'] == stripped_calculator_code}.first['en_address']
    packed_calculator_contract_address = "000000000000000000000000#{calculator_contract_address}"

    puts "\n\nCalculator contract address: ", calculator_contract_address, "\n"
    puts "\nContract args: 9b7e450c#{calculator_contract_address}#{val1}#{val2}\n\n"

    # Invoke contract with packed address (2 32-byte words) and args for addValuesWithDelegateCall
    invoke_contract!(contract_hash, creator, 0, "9b7e450c#{packed_calculator_contract_address}#{val1}#{val2}")

    puts "Invoked machine contract"
  end
end
